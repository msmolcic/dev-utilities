#!/usr/bin/env bash

set -e

# Path to the AWS config file
CONFIG_FILE="$HOME/.aws/config"

# Path to the AWS credentials file
CREDENTIALS_FILE="$HOME/.aws/credentials"

# Updates or creates a profile
update_or_create_profile() {
  
  local profile_name="$1"
  local key_id="$2"
  local secret_key="$3"
  local session_token="$4"

  if grep -q "^\[${profile_name}\]" "$CREDENTIALS_FILE"; then
    # Update the existing profile
    sed -i.bak \
        -e "/\[${profile_name}\]/,/^\[.*\]/{s|\(aws_access_key_id *= *\).*|\1${key_id}|;}" \
        -e "/\[${profile_name}\]/,/^\[.*\]/{s|\(aws_secret_access_key *= *\).*|\1${secret_key}|;}" \
        "$CREDENTIALS_FILE"

    if [ -n "${session_token}" ]; then
      sed -i.bak "/\[${profile_name}\]/,/^\[.*\]/{s|\(aws_session_token *= *\).*|\1${session_token}|;}" "$CREDENTIALS_FILE"
    fi
  else
    # Create a new profile
    {
      # Add an empty lines before the new profile
      echo ""
      echo ""
      echo "[${profile_name}]"
      echo "aws_access_key_id = ${key_id}"
      echo "aws_secret_access_key = ${secret_key}"
      if [ -n "${session_token}" ]; then
        echo "aws_session_token = ${session_token}"
      fi
    } >> "$CREDENTIALS_FILE"
  fi

  # Remove the backup file created by sed
  rm -f "${CREDENTIALS_FILE}.bak"
}

###
# Main
###

mfa_code="$1"
profile_name="$2"

USER_AWS_ACCESS_KEY_ID=$(grep -A3 "\[${profile_name}\]" "$CREDENTIALS_FILE" | grep 'aws_access_key_id' | awk -F'=' '{print $2}' | tr -d '[:space:]')
USER_AWS_SECRET_ACCESS_KEY=$(grep -A3 "\[${profile_name}\]" "$CREDENTIALS_FILE" | grep 'aws_secret_access_key' | awk -F'=' '{print $2}' | tr -d '[:space:]')
USER_MFA_SERIAL=$(grep -A3 "\[profile ${profile_name}\]" "$CONFIG_FILE" | grep 'mfa_serial' | awk -F'=' '{print $2}' | tr -d '[:space:]')

response=$(aws sts get-session-token --serial-number "$USER_MFA_SERIAL" --token-code "$mfa_code" --profile="$profile_name" --duration-seconds=86400)

AWS_ACCESS_KEY_ID=$(echo "$response" | jq -r '.Credentials.AccessKeyId')
AWS_SECRET_ACCESS_KEY=$(echo "$response" | jq -r '.Credentials.SecretAccessKey')
AWS_SESSION_TOKEN=$(echo "$response" | jq -r '.Credentials.SessionToken')

# Call the function to update or create the provisioned and 'default' profiles
update_or_create_profile "default" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" "$AWS_SESSION_TOKEN"
update_or_create_profile "$profile_name" "$USER_AWS_ACCESS_KEY_ID" "$USER_AWS_SECRET_ACCESS_KEY" ""

echo "Successfully logged in."
